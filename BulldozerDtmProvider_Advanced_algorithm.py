# -*- coding: utf-8 -*-

"""
/***************************************************************************
 BulldozerDtmProvider
                                 A QGIS plugin
 BulldozerDtmProvider
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-17
        copyright            : (C) 2023 by CNES
        email                : alexia.mondot@cnes.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'CNES'
__date__ = '2023-04-17'
__copyright__ = '(C) 2023 by CNES'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterFolderDestination,
                       QgsRasterLayer,
                       QgsProject)

from .import_bulldozer import dsm_to_dtm
from .BulldozerDtmProvider_algorithm import BulldozerDtmProviderAlgorithm

class BulldozerDtmProviderAdvancedAlgorithm(BulldozerDtmProviderAlgorithm):
    """
    Processing algorithm that calls Bulldozer with advanced parameters.
    """

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    NB_WORKERS = 'NB_WORKERS'
    GENERATE_DHM = 'GENERATE_DHM'
    MAX_OBJECT_WIDTH = 'MAX_OBJECT_WIDTH'
    OUTPUT_RES = 'OUTPUT_RES'
    NO_DATA = 'NO_DATA'
    MIN_VALID_HEIGH = 'MIN_VALID_HEIGH'
    CHECK_INTERSECTION = 'CHECK_INTERSECTION'
    DEVELOPPER_MODE = 'DEVELOPPER_MODE'
    OUTPUT_DIRECTORY = 'OUTPUT_DIRECTORY'

    def initAlgorithm(self, config):
        """
        Define the inputs, output and properties of the algorithm
        """

        self.addParameter(QgsProcessingParameterRasterLayer(self.INPUT,
                                                            self.tr('Input DSM')
                                                            )
                          )

        self.addParameter(QgsProcessingParameterNumber(self.NB_WORKERS,
                                                       self.tr('Number max workers'),
                                                       type=QgsProcessingParameterNumber.Integer,
                                                       minValue=0,
                                                       defaultValue=16))

        self.addParameter(QgsProcessingParameterBoolean(self.GENERATE_DHM,
                                                        self.tr('Generates the DHM (DSM - DTM)'),
                                                        defaultValue=False))

        self.addParameter(QgsProcessingParameterNumber(self.MAX_OBJECT_WIDTH,
                                                       self.tr('Foreground max object width (in meter)'),
                                                       type=QgsProcessingParameterNumber.Integer,
                                                       minValue=0,
                                                       defaultValue=16))

        self.addParameter(QgsProcessingParameterNumber(self.OUTPUT_RES,
                                                       self.tr('Output DTM resolution'),
                                                       type=QgsProcessingParameterNumber.Double,
                                                       minValue=0))

        self.addParameter(QgsProcessingParameterNumber(self.NO_DATA,
                                                       self.tr('Nodata value of the input DSM'),
                                                       type=QgsProcessingParameterNumber.Double))

        self.addParameter(QgsProcessingParameterNumber(self.MIN_VALID_HEIGH,
                                                       self.tr(
                                                           'DSM minimum valid elevation. All the points lower this threshold will be consider as nodata'),
                                                       type=QgsProcessingParameterNumber.Double))

        self.addParameter(QgsProcessingParameterBoolean(self.CHECK_INTERSECTION,
                                                        self.tr('Allows snapping DTM values above the DSM to the DSM'),
                                                        defaultValue=False))

        self.addParameter(QgsProcessingParameterBoolean(self.DEVELOPPER_MODE,
                                                        self.tr('Keep the intermediate results'),
                                                        defaultValue=False))

        self.addParameter(QgsProcessingParameterFolderDestination(self.OUTPUT_DIRECTORY,
                                                                  self.tr('Output directory'),
                                                                  optional=True))

    def processAlgorithm(self, parameters, context, feedback):
        """
        Call Bulldozer with full parameters
        """

        source = self.parameterAsLayer(parameters, self.INPUT, context).source()
        nb_max_workers = self.parameterAsInt(parameters, self.NB_WORKERS, context)
        generate_dhm = self.parameterAsInt(parameters, self.GENERATE_DHM, context)
        max_object_width = self.parameterAsInt(parameters, self.MAX_OBJECT_WIDTH, context)
        output_resolution = self.parameterAsInt(parameters, self.OUTPUT_RES, context)
        no_data = self.parameterAsInt(parameters, self.NO_DATA, context)
        min_valid_heigh = self.parameterAsInt(parameters, self.MIN_VALID_HEIGH, context)
        check_intersection = self.parameterAsInt(parameters, self.CHECK_INTERSECTION, context)
        developper_mode = self.parameterAsInt(parameters, self.DEVELOPPER_MODE, context)
        output_dir = self.parameterAsString(parameters, self.OUTPUT_DIRECTORY, context)

        dsm_to_dtm(dsm_path=source, output_dir=output_dir, nb_max_workers=nb_max_workers, generate_dhm=generate_dhm,
                   max_object_width=max_object_width, output_resolution=output_resolution, no_data=no_data,
                   min_valid_heigh=min_valid_heigh, check_intersection=check_intersection,
                   developper_mode=developper_mode)

        self.OUTPUT = os.path.join(output_dir, "DTM.tif")
        return {self.OUTPUT: os.path.join(output_dir, "DTM.tif")}

    def postProcessAlgorithm(self, context, feedback):
        """
        Add the DTM to the map
        """
        rlayer = QgsRasterLayer(self.OUTPUT, "DTM")

        if not rlayer.isValid():
            print("Layer failed to load!")

        QgsProject.instance().addMapLayer(rlayer)

        return {self.OUTPUT: self.OUTPUT}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm.
        """
        return 'Bulldozer (Advanced)'

    def createInstance(self):
        """
        Create a new instance of the algorithm.
        """
        return BulldozerDtmProviderAdvancedAlgorithm()
